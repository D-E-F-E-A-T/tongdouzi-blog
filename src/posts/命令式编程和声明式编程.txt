命令式：行动导向（Action-Oriented），一步一步告诉计算机先做什么再做什么
声明式：目标驱动（Goal-Driven），应该做什么，但不指定具体要怎么做

函数式和逻辑式都是声明式的一种

Dataflow Programming Dataflow Programming
Attribute-Oriented Programming 属性导向式编程


命令式语言提倡迭代而不鼓励递归、声明式语言提倡递归而不支持迭代

就语法而言，它不允许迭代中的循环变量；就视角而言，迭代着眼微观过程而递归着眼宏观规律。

命令式把程序看作一个自动机，输入是初始状态，输出是最终状态，编程就是设计一系列指令，通过自动机执行以完成状态转变；
函数式把程序看作一个数学函数，输入是自变量，输出是因变量，编程就是设计一系列函数，通过表达式变换以完成计算；
逻辑式把程序看作一个逻辑证明，输入是题设，输出是结论，编程就是设计一系列命题，通过逻辑推理以完成证明。

https://www.cnblogs.com/doit8791/p/8232821.html

而且操作它们的时候你要小心翼翼，轻微的触碰可能就会导致页面重排，这可是杀死性能的罪魁祸首。

DOM 节点的结构复杂，并且稍有操作不慎就会引起重排、重绘

它把管理DOM碎片这件事情自动化、抽象化了，使得你无需再去手动处理



1.批量读写
当我们需要获取某一属性，这一属性需要计算才能得到，并且队列中存在尚未提交的DOM修改操作，则此时，DOM修改操作的队列将会被提交。
为了提高效率，减少更新render tree的次数，可以先统一读取属性，然后统一修改DOM，这样，就可以减少更新render tree的次数。

2.虚拟结点
当我们需要对DOM做出大量修改时，可以先创建一个虚拟结点，将所有修改附加在该节点，最后将该虚拟节点一次性提交给在render tree上存在的结点，则相当于只提交了一次修改操作。
DocumentFragment接口表示一个没有父级文件的最小文档对象。它被当作一个轻量的Document使用，用于存储已排好版的或尚未打理好格式的XML。因为DocumentFragment
不是真实DOM树的一部分，它的变化不会引起DOM树的重新渲染操作，且不会导致性能等问题。

3.查找元素的优化
因为ID是唯一的，也有原始的方法，因此使用ID查找元素是最快的，其次的是根据类和类型查找元素，通过属性查找元素是最慢的，因此应该尽可能的通过ID或者类来查找元素，避免通过类来查找元素。